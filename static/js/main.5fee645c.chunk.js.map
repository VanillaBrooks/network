{"version":3,"sources":["graph.js","file_upload.js","App.js","serviceWorker.js","index.js"],"names":["CustomGraph","props","data","nodesByFileGraph","graph_json","myConfig","make_config","state","config","isColorNodesSame","isColorNodesFile","isNodeSubroutine","isNodeFile","isNodeSubroutineAndFile","key","prevZoom","newZoom","console","log","this","setState","currentZoom","window","alert","dontAllowColorOptions","generateSubroutineGraph","graph_number","restartSimulation","color_nodes_same","render_option","nodes","json_data","map","x","id","self_subroutine_name","links","generic_edges","nodesByFileAndSubroutineGraph","file_to_color","Map","node","color","has","parent_file_name","get","new_color","randomColor","set","edges","color_nodes_by_parent_file","genericButtonGroupColoring","is_active","allowed_active","graph","ref","onZoomChange","onClickGraph","onClickNode","onDoubleClickNode","onRightClickNode","onClickLink","onRightClickLink","onMouseOverNode","onMouseOutNode","onMouseOverLink","onMouseOutLink","onNodePositionChange","className","class","type","colorNodesSameClass","disabled","onClick","colorNodesSame","colorNodesFileClass","colorNodesFile","nodesBySubroutineClass","nodesBySubroutine","nodesByFileClass","nodesByFile","nodesByFileAndSubroutineClass","nodesByFileAndSubroutine","React","Component","event","preventDefault","nodeId","source","target","y","called_subroutine_name","caller_callee_map","subroutine_to_file_map","forEach","edge","start_file","end_file","current","add","Set","entries","source_file","push","use_colors","symbolType","concat","JsonUpload","onDrop","useCallback","acceptedFiles","reader","FileReader","readAsText","onload","onUpload","JSON","parse","result","useDropzone","getRootProps","getInputProps","isDragActive","style","App","initialized_graph","uploaded_json","undefined","uploadedAndParsedJson","bind","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fee645c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\nimport { Graph } from 'react-d3-graph';\nimport randomColor from 'randomcolor';\n\nclass CustomGraph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\t//const data = no_color_graph(props.graph_json);\n\t\tconst data = nodesByFileGraph(props.graph_json);\n\n\t\t\n\t\t// the graph configuration, you only need to pass down properties\n\t\t// that you want to override, otherwise default ones will be used\n\t\tconst myConfig = make_config();\n\t\tthis.state = {\n\t\t\tdata: data, \n\t\t\tconfig: myConfig,\n\t\t\tisColorNodesSame: true,\n\t\t\tisColorNodesFile: false,\n\t\t\tisNodeSubroutine: false,\n\t\t\tisNodeFile: true,\n\t\t\tisNodeSubroutineAndFile: false,\n\t\t\tkey: 1,\n\t\t};\n\t}\n\n\tonZoomChange(prevZoom, newZoom) {\n\t\tconsole.log(newZoom)\n\t\tthis.setState({currentZoom: newZoom});\n\t}\n\n\tdontAllowColorOptions() {\n\t\tif (this.state.isNodeFile) {\n\t\t\tconsole.log(\"preventing options\")\n\t\t\treturn true\n\t\t}\n\t\telse {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\t// makes a number associated with what option is selected for the type of graph\n\t// information being displayed\n\t//\n\t// 1 - nodes are subroutines\n\t// 2 - nodes are files\n\t// 3 - nodes are both subroutines and files\n\tgraph_number() {\n\t\tif (this.state.isNodeSubroutine) {\n\t\t\treturn 1\n\t\t}\n\t\telse if (this.state.isNodeFile) {\n\t\t\treturn 2\n\t\t}\n\t\telse if (this.state.isNodeSubroutineAndFile) {\n\t\t\treturn 3\n\t\t}\n\t\telse {\n\t\t\twindow.alert(\"unhandled graph type\")\n\t\t}\n\t}\n\n\t// redraw all the nodes with the same colors\n\tcolorNodesSame() {\n\t\tconsole.log(\"nodes same\")\n\t\tif (this.dontAllowColorOptions()) {\n\t\t\treturn \n\t\t}\n\t\tthis.setState({\n\t\t\tisColorNodesSame: true, \n\t\t\tisColorNodesFile: false,\n\t\t\tdata:this.generateSubroutineGraph(true, this.graph_number())\n\t\t})\n\t}\n\n\t// redraw all the nodes with their colors corresponding to the colors of the parent file\n\tcolorNodesFile() {\n\t\tconsole.log(\"nodes file\")\n\t\tif (this.dontAllowColorOptions()) {\n\t\t\treturn \n\t\t}\n\t\tthis.setState({\n\t\t\tisColorNodesSame: false, \n\t\t\tisColorNodesFile: true, \n\t\t\tdata:this.generateSubroutineGraph(false, this.graph_number())\n\t\t});\n\t}\n\n\t// Nodes Setters\n\tnodesBySubroutine() {\n\t\tconsole.log(\"nodes by subroutine\")\n\t\tthis.setState({\n\t\t\tisNodeSubroutine: true,\n\t\t\tisNodeFile: false,\n\t\t\tisNodeSubroutineAndFile: false,\n\t\t\tdata: this.generateSubroutineGraph(this.state.isColorNodesSame, 1)\n\t\t});\n\n\t\tthis.restartSimulation()\n\t}\n\n\tnodesByFile() {\n\t\tconsole.log(\"nodes by file\")\n\t\tthis.setState({\n\t\t\tisNodeSubroutine: false,\n\t\t\tisNodeFile: true,\n\t\t\tisNodeSubroutineAndFile: false,\n\t\t\tdata: this.generateSubroutineGraph(this.state.isColorNodesSame, 2)\n\t\t})\n\t\tthis.restartSimulation()\n\t}\n\n\tnodesByFileAndSubroutine() {\n\t\tconsole.log(\"nodes by subroutine and file\")\n\t\tthis.setState({\n\t\t\tisNodeSubroutine: false,\n\t\t\tisNodeFile: false,\n\t\t\tisNodeSubroutineAndFile: true,\n\t\t\tdata: this.generateSubroutineGraph(this.state.isColorNodesSame, 3)\n\t\t})\n\n\t\tthis.restartSimulation()\n\t}\n\n\tgenerateSubroutineGraph(color_nodes_same, render_option) {\n\t\tconsole.log(this.state.isNodeSubroutine, this.state.isNodeFile, this.state.isNodeSubroutineAndFile);\n\t\tif (color_nodes_same === true) {\n\t\t\tif (render_option === 1) {\n\t\t\t\tconsole.log(\"same color subroutine only\")\n\t\t\t\treturn no_color_graph(this.props.graph_json)\n\t\t\t}\n\t\t\telse if (render_option === 2) {\n\t\t\t\tconsole.log(\"same color file only\")\n\t\t\t\treturn nodesByFileGraph(this.props.graph_json);\n\t\t\t}\n\t\t\telse if (render_option === 3) {\n\t\t\t\tconsole.log(\"same color file and subroutine\")\n\t\t\t\treturn nodesByFileAndSubroutineGraph(this.props.graph_json, false);\n\t\t\t}\n\t\t} else if (color_nodes_same === false) {\n\t\t\tif (render_option === 1){ \n\t\t\t\tconsole.log(\"color files | subroutine only\")\n\t\t\t\treturn color_nodes_by_parent_file(this.props.graph_json)\n\t\t\t}\n\t\t\telse if (render_option === 2) {\n\t\t\t\tconsole.log(\"color files | file only\")\n\t\t\t\treturn nodesByFileGraph(this.props.graph_json);\n\t\t\t}\n\t\t\telse if (render_option === 3) {\n\t\t\t\tconsole.log(\"color files | file and subroutine\")\n\t\t\t\treturn nodesByFileAndSubroutineGraph(this.props.graph_json, true);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twindow.alert(\"generateSubroutineGraph: Neither value true\")\n\t\t}\n\t}\n\t\n\t// colors stuff\n\tcolorNodesSameClass() {\n\t\treturn this.genericButtonGroupColoring(this.state.isColorNodesSame, !this.state.isNodeFile)\n\t}\n\tcolorNodesFileClass() {\n\t\treturn this.genericButtonGroupColoring(this.state.isColorNodesFile, !this.state.isNodeFile)\n\t}\n\n\t// nodes stuff\n\tnodesBySubroutineClass() {\n\t\treturn this.genericButtonGroupColoring(this.state.isNodeSubroutine, true);\n\t}\n\tnodesByFileClass() {\n\t\treturn this.genericButtonGroupColoring(this.state.isNodeFile, true);\n\t}\n\tnodesByFileAndSubroutineClass() {\n\t\treturn this.genericButtonGroupColoring(this.state.isNodeSubroutineAndFile, true);\n\t}\n\n\n\t// is active determines if this button should be active (its clicked)\n\t// allowed_active determines if these buttons are even allowed to be active (for example,\n\t// this node coloring options are not enabled if the nodes are files)\n\tgenericButtonGroupColoring(is_active, allowed_active) {\n\t\tif (is_active === true) {\n\t\t\tif (allowed_active === true) {\n\t\t\t\treturn \"list-group-item list-group-item-action active\"\n\t\t\t} else {\n\t\t\t\treturn \"list-group-item list-group-item-action\"\n\t\t\t}\n\t\t} else if (is_active === false) {\n\t\t\treturn \"list-group-item list-group-item-action\"\n\t\t}\n\t\tconsole.log(\"WARNING: genericButtonGroupColoring did not return a class\")\n\t}\n\n\trestartSimulation() {\n\t\tthis.setState({key: this.state.key + 1})\n\t}\n\n\trender() {\n\t\tlet graph = <Graph\n\t\t\tkey={this.state.key}\n\t\t    id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n\t\t\tref=\"graph\"\n\t\t    data={this.state.data}\n\t\t    config={this.state.config}\n\t\t\tonZoomChange={this.onZoomChange}\n\t\t    onClickGraph={onClickGraph}\n\t\t    onClickNode={onClickNode}\n\t\t    onDoubleClickNode={onDoubleClickNode}\n\t\t    onRightClickNode={onRightClickNode}\n\t\t    onClickLink={onClickLink}\n\t\t    onRightClickLink={onRightClickLink}\n\t\t    onMouseOverNode={onMouseOverNode}\n\t\t    onMouseOutNode={onMouseOutNode}\n\t\t    onMouseOverLink={onMouseOverLink}\n\t\t    onMouseOutLink={onMouseOutLink}\n\t\t\tonNodePositionChange={onNodePositionChange}\n\t\t\t/>\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-9\">\n\t\t\t\t\t\t{graph}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-3 graph-settings shadow\">\n\t\t\t\t\t\t<h3 className=\"mt-2\">Settings</h3>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<hr/>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<h5 class=\"pl-3 mt-1\">Node Colors</h5>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.dontAllowColorOptions() ?\n\t\t\t\t\t\t\t\t<div class=\"list-group\">\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class={this.colorNodesSameClass()} disabled onClick={()=> this.colorNodesSame()}>Same Color</button>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class={this.colorNodesFileClass()} disabled onClick={() => this.colorNodesFile()} >Color By File</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<div class=\"list-group\">\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class={this.colorNodesSameClass()} onClick={()=> this.colorNodesSame()}>Same Color</button>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class={this.colorNodesFileClass()} onClick={() => this.colorNodesFile()} >Color By File</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<h5 class=\"pl-3 mt-3\">Node Options</h5>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"list-group\">\n\t\t\t\t\t\t\t<button type=\"button\" class={this.nodesBySubroutineClass()} onClick={()=> this.nodesBySubroutine()}>Nodes by Subroutines</button>\n\t\t\t\t\t\t\t<button type=\"button\" class={this.nodesByFileClass()} onClick={() => this.nodesByFile()} >Nodes by File</button>\n\t\t\t\t\t\t\t<button type=\"button\" class={this.nodesByFileAndSubroutineClass()} onClick={() => this.nodesByFileAndSubroutine()} >Include both subroutines and files</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary mt-3\" onClick={() => this.restartSimulation()}>Restart Simulation</button>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Callback to handle click on the graph.\n// @param {Object} event click dom event\nconst onClickGraph = function(event) {\n\tevent.preventDefault();\n     //window.alert('Clicked the graph background');\n};\n\nconst onClickNode = function(nodeId) {\n     //window.alert('Clicked node ${nodeId}');\n};\n\nconst onDoubleClickNode = function(nodeId) {\n     //window.alert('Double clicked node ${nodeId}');\n};\n\nconst onRightClickNode = function(event, nodeId) {\n\tevent.preventDefault();\n     //window.alert('Right clicked node ${nodeId}');\n};\n\nconst onMouseOverNode = function(nodeId) {\n     //window.alert(`Mouse over node ${nodeId}`);\n};\n\nconst onMouseOutNode = function(nodeId) {\n     //window.alert(`Mouse out node ${nodeId}`);\n};\n\nconst onClickLink = function(source, target) {\n     //window.alert(`Clicked link between ${source} and ${target}`);\n};\n\nconst onRightClickLink = function(event, source, target) {\n\tevent.preventDefault();\n     //window.alert('Right clicked link between ${source} and ${target}');\n};\n\nconst onMouseOverLink = function(source, target) {\n     //window.alert(`Mouse over in link between ${source} and ${target}`);\n};\n\nconst onMouseOutLink = function(source, target) {\n     //window.alert(`Mouse out link between ${source} and ${target}`);\n};\n\nconst onNodePositionChange = function(nodeId, x, y) {\n     //window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n};\n\nconst make_config = function() {\n\treturn {\n\t  \"automaticRearrangeAfterDropNode\": false,\n\t  \"initialZoom\": .3,\n\t  \"collapsible\": false,\n\t  \"directed\": true,\n\t  \"focusAnimationDuration\": 0.75,\n\t  \"focusZoom\": 1,\n\t  \"height\": 1000,\n\t  \"highlightDegree\": 1,\n\t  \"highlightOpacity\": 0.2,\n\t  \"linkHighlightBehavior\": false,\n\t  \"maxZoom\": 8,\n\t  \"minZoom\": 0.1,\n\t  \"nodeHighlightBehavior\": true,\n\t  \"panAndZoom\": false,\n\t  //\"staticGraph\": false,\n\t  //\"staticGraphWithDragAndDrop\": false,\n\t  \"width\": 1500,\n\t  \"d3\": {\n\t    \"alphaTarget\": 0.01,\n\t    \"gravity\": -2000,\n\t    \"linkLength\": 400,\n\t    \"linkStrength\": .1,\n\t    \"disableLinkForce\": false\n\t  },\n\t  \"node\": {\n\t    \"color\": \"#d3d3d3\",\n\t    \"fontColor\": \"black\",\n\t    \"fontSize\": 20,\n\t    \"fontWeight\": \"normal\",\n\t    \"highlightColor\": \"red\",\n\t    \"highlightFontSize\": 30,\n\t    \"highlightFontWeight\": \"bold\",\n\t    \"highlightStrokeColor\": \"SAME\",\n\t    \"highlightStrokeWidth\": 1.5,\n\t    \"labelProperty\": \"name\",\n\t    \"mouseCursor\": \"pointer\",\n\t    \"opacity\": 1,\n\t    \"renderLabel\": true,\n\t    \"size\": 450,\n\t    \"strokeColor\": \"none\",\n\t    \"strokeWidth\": 1.5,\n\t    \"svg\": \"\",\n\t    \"symbolType\": \"circle\"\n\t  },\n\t  \"link\": {\n\t    \"color\": \"#d3d3d3\",\n\t    \"fontColor\": \"red\",\n\t    \"fontSize\": 10,\n\t    \"fontWeight\": \"normal\",\n\t    \"highlightColor\": \"blue\",\n\t    \"highlightFontSize\": 8,\n\t    \"highlightFontWeight\": \"bold\",\n\t    \"mouseCursor\": \"pointer\",\n\t    \"opacity\": 1,\n\t    \"renderLabel\": false,\n\t    \"semanticStrokeWidth\": false,\n\t    \"strokeWidth\": 2,\n\t    \"markerHeight\": 6,\n\t    \"markerWidth\": 6,\n\t\t//\"type\": \"CURVE_SMOOTH\"\n\t  }\n\t}\n}\n\n// given some json generate a blank graph with each node using the default colors of the config\nfunction no_color_graph(json_data) {\n\t// graph payload (with minimalist structure)\n\tconst nodes = json_data.nodes.map(x => {\n\t\treturn {id: x.self_subroutine_name}\n\t})\n\tconst data = {\n\t\tnodes: nodes,\n\t\tlinks: generic_edges(json_data) \n\t};\n\treturn data\n}\n\n// common function to generate the links between nodes\nfunction generic_edges(json_data) {\n\tconst edges = json_data.edges.map(x => {\n\t\tlet map = {\n\t\t\tsource: x.self_subroutine_name,\n\t\t\ttarget: x.called_subroutine_name\n\t\t};\n\t\treturn map\n\t})\n\treturn edges\n}\n\n\n// make the color of each node dependent on the file that it came from\nfunction color_nodes_by_parent_file(json_data) {\n\tlet file_to_color = new Map();\n\n\tconsole.log(\"nodes\")\n\tconsole.log(json_data.nodes)\n\tconst nodes = json_data.nodes.map(node => {\n\t\tlet color;\n\t\tif (file_to_color.has(node.parent_file_name)) {\n\t\t\tcolor = file_to_color.get(node.parent_file_name);\n\t\t}\n\t\telse {\n\t\t\tlet new_color = randomColor();\n\t\t\tfile_to_color.set(node.parent_file_name, new_color)\n\t\t\tcolor = new_color\n\t\t}\n\n\t\treturn {\n\t\t\tid: node.self_subroutine_name,\n\t\t\tcolor: color\n\t\t}\n\t})\n\n\tconst edges = generic_edges(json_data);\n\n\treturn {\n\t\tnodes: nodes,\n\t\tlinks: edges\n\t}\n}\n\nfunction nodesByFileGraph(json_data) {\n\tlet caller_callee_map = new Map();\n\tlet subroutine_to_file_map = new Map();\n\n\tlet nodes = json_data.nodes.map(node => {\n\t\tsubroutine_to_file_map.set(node.self_subroutine_name, node.parent_file_name);\n\n\t\treturn {\n\t\t\tid: node.parent_file_name\n\t\t}\n\t});\n\n\t// first we make a pass through all the edges and tally up all the occurances\n\t// of the files calling each other\n\tjson_data.edges.forEach(edge => {\n\t\tlet start_file = subroutine_to_file_map.get(edge.self_subroutine_name);\n\t\tlet end_file = subroutine_to_file_map.get(edge.called_subroutine_name);\n\n\t\tif (caller_callee_map.has(start_file)) {\n\t\t\tlet current = caller_callee_map.get(start_file);\n\t\t\tcurrent.add(end_file);\n\t\t\tcaller_callee_map.set(start_file, current)\n\t\t}\n\t\telse {\n\t\t\tlet set = new Set();\n\t\t\tset.add(end_file);\n\t\t\tcaller_callee_map.set(start_file, set);\n\t\t}\n\t})\n\n\tconsole.log(\"caller map\");\n\tconsole.log(caller_callee_map);\n\n\tconsole.log(\"edges\")\n\n\tlet edges = []\n\tfor (const [source_file, target_list] of caller_callee_map.entries()) {\n\t\t// map over the list of files each file calls\n\t\ttarget_list.forEach((target) => {\n\t\t\tedges.push( {\n\t\t\t\tsource: source_file,\n\t\t\t\ttarget: target,\n\t\t\t})\n\t\t})\n\t}\n\n\tconsole.log(edges)\n\n\treturn {\n\t\tnodes: nodes,\n\t\tlinks: edges\n\t}\n}\n\n// use_colors determines if we should use the default node color from the config (false) or \n// make all subroutines from the same file the same color (true)\nfunction nodesByFileAndSubroutineGraph(json_data, use_colors) {\n\t// optionally stores colors that each file is associated with\n\tlet file_to_color = new Map();\n\n\tlet edges = []\n\n\t// generate nodes for the files\n\tlet nodes_to_concat= json_data.nodes.map(node => {\n\t\t// first we make sure that every file has a color associated wtih it\n\t\tlet color;\n\t\tif (file_to_color.has(node.parent_file_name)) {\n\t\t\tcolor = file_to_color.get(node.parent_file_name);\n\t\t}\n\t\telse {\n\t\t\tlet new_color = randomColor();\n\t\t\tfile_to_color.set(node.parent_file_name, new_color)\n\t\t\tcolor = new_color\n\t\t}\n\n\t\tif (use_colors) {\n\t\t\treturn {\n\t\t\t\tid: node.parent_file_name,\n\t\t\t\tsymbolType: \"triangle\",\n\t\t\t\tcolor: color\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn {\n\t\t\t\tid: node.parent_file_name,\n\t\t\t\tsymbolType: \"triangle\",\n\t\t\t}\n\t\t}\n\t});\n\n\t// also generate nodes for the subroutines\n\tlet nodes = nodes_to_concat.concat(json_data.nodes.map(node => {\n\t\t// make sure there is an edge between the file and and its subroutine\n\t\tedges.push( {\n\t\t\tsource: node.parent_file_name,\n\t\t\ttarget: node.self_subroutine_name,\n\t\t})\n\n\t\tif (use_colors) {\n\t\t\treturn {\n\t\t\t\tid: node.self_subroutine_name,\n\t\t\t\tsymbolType: \"circle\",\n\t\t\t\tcolor: file_to_color.get(node.parent_file_name)\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn {\n\t\t\t\tid: node.self_subroutine_name,\n\t\t\t\tsymbolType: \"circle\"\n\t\t\t}\n\t\t}\n\t}))\n\n\n\t// first we make a pass through all the edges and tally up all the occurances\n\t// of the files calling each other\n\tjson_data.edges.forEach(edge => {\n\t\t// also add connections between subroutines\n\t\tedges.push( {\n\t\t\tsource: edge.self_subroutine_name,\n\t\t\ttarget: edge.called_subroutine_name,\n\t\t})\n\t})\n\n\treturn {\n\t\tnodes: nodes,\n\t\tlinks: edges\n\t}\n}\n\nexport default CustomGraph;\n","import {useDropzone} from 'react-dropzone'\nimport json_data from './streams.json';\nimport React, {useCallback} from 'react';\n\nfunction JsonUpload(props) {\n\tconst onDrop = useCallback(acceptedFiles => {\n\t\tlet reader = new FileReader();\n\t\treader.readAsText(acceptedFiles[0])\n\n\t\treader.onload = function() {\n\t\t\tprops.onUpload(JSON.parse(reader.result));\n  \t\t};\n  \t}, [props])\n\n  \tconst {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n\tconst onClick = function(event) {\n\t\tprops.onUpload(json_data)\n\t}\n \n\t// TODO: the padding in here is bad but ive spent like an hour trying to vertically\n\t// center in bootstrap so it is what it is\n  \treturn (\n\t\t<div className=\"container\">\n\t\t\t<div style={{\"padding\":\"18% 0\"}}/>\n\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t<div className=\"col-5 align-self-center shadow shadow-lg rounded\">\n\t\t\t\t\t<div {...getRootProps(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\"minHeight\":\"100px\",\n\t\t\t\t\t\t\t\t\"borderStyle\":\"dashed\",\n\t\t\t\t\t\t\t\t\"borderRadius\":\"3px\",\n\t\t\t\t\t\t\t\t\"borderWidth\":\"1px\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclassName: \"p-2 mt-3\"\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t\t}>\n\t\t\t\t\t\t{/* This is the drag-to-upload a file*/}\n\t\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t\t{\n  \t  \t\t\t\t  \t  isDragActive ?\n  \t  \t\t\t\t  \t    <p className=\"text-center\">Drop Here</p> :\n  \t  \t\t\t\t  \t    <p className=\"text-center\">Drag A Parsing Result to View</p>\n\t\t\t\t\t\t}\n\n  \t  \t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"row p-2\">\n\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t<p className=\"text-center\">or:</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* OTHERWISE: we can load a default file graph*/}\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-md offset-md-3 pl-4\">\n\t\t\t\t\t\t\t<button className=\"btn btn-primary mb-2\" onClick={onClick}>Load Example Graph</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n  \t)\n}\n\nexport default JsonUpload;\n","import React from 'react';\n//import ReactDOM from \"react-dom\";\nimport CustomGraph from \"./graph.js\";\nimport JsonUpload from \"./file_upload.js\";\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {initialized_graph: false, uploaded_json: undefined};\n\t}\n\n\t// When the user chooses json data this callback fires and we set the json that we \n\t// will pass to the graph\n\tonUpload(uploadedAndParsedJson) {\n\t\tconsole.log(\"json data has been uploaded\");\n\t\tthis.setState({uploaded_json: uploadedAndParsedJson, initialized_graph: true})\n\t}\n\t\n\trender() {\n\t\tif (this.state.initialized_graph === false) {\n\t\t\treturn <JsonUpload onUpload={this.onUpload.bind(this)}/>\n\t\t} else {\n\t\t\treturn <CustomGraph graph_json={this.state.uploaded_json}/>\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}