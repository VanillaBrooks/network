{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","console","log","json_data","nodes","map","x","id","self_subroutine_name","edges","source","target","called_subroutine_name","data","links","myConfig","make_config","state","config","prevZoom","newZoom","this","setState","currentZoom","graph","onZoomChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gtfAOMA,E,kDAEL,WAAYC,GAAQ,IAAD,sBAClB,cAAMA,GAENC,QAAQC,IAAIC,GAGZ,IAAMC,EAAQD,EAAUC,MAAMC,KAAI,SAAAC,GACjC,MAAO,CAACC,GAAID,EAAEE,yBAETC,EAAQN,EAAUM,MAAMJ,KAAI,SAAAC,GAKjC,MAJU,CACTI,OAAQJ,EAAEE,qBACVG,OAAQL,EAAEM,2BAIZX,QAAQC,IAAI,SACZD,QAAQC,IAAIE,GACZH,QAAQC,IAAI,SACZD,QAAQC,IAAIO,GAEZ,IAAMI,EAAO,CACZT,MAAOA,EACPU,MAAOL,GAKFM,EAAWC,IA5BC,OA6BlB,EAAKC,MAAQ,CAACJ,KAAMA,EAAMK,OAAQH,GA7BhB,E,yDAiCNI,EAAUC,GACtBC,KAAKC,SAAS,CAACC,YAAaH,M,+BAI5B,IAAMI,EAAQ,kBAAC,QAAD,CACTjB,GAAG,WACHM,KAAMQ,KAAKJ,MAAMJ,KACjBK,OAAQG,KAAKJ,MAAMC,OACtBO,aAAcJ,KAAKI,eAarB,OADAxB,QAAQC,IAAIsB,GACLA,M,GAzDSE,IAAMC,WA2GlBX,EAAc,WACnB,MAAO,CACL,iCAAmC,EACnC,aAAe,EACf,UAAY,EACZ,uBAA0B,IAC1B,UAAa,EACb,OAAU,IACV,gBAAmB,EACnB,iBAAoB,GACpB,uBAAyB,EACzB,QAAW,EACX,QAAW,GACX,uBAAyB,EACzB,YAAc,EACd,aAAe,EACf,4BAA8B,EAC9B,MAAS,KACT,GAAM,CACJ,YAAe,IACf,SAAY,IACZ,WAAc,IACd,aAAgB,GAChB,kBAAoB,GAEtB,KAAQ,CACN,MAAS,UACT,UAAa,QACb,SAAY,GACZ,WAAc,SACd,eAAkB,MAClB,kBAAqB,GACrB,oBAAuB,OACvB,qBAAwB,OACxB,qBAAwB,IACxB,cAAiB,OACjB,YAAe,UACf,QAAW,EACX,aAAe,EACf,KAAQ,IACR,YAAe,OACf,YAAe,IAEf,WAAc,UAEhB,KAAQ,CACN,MAAS,UACT,UAAa,MACb,SAAY,GACZ,WAAc,SACd,eAAkB,OAClB,kBAAqB,EACrB,oBAAuB,OACvB,YAAe,UACf,QAAW,EACX,aAAe,EACf,qBAAuB,EACvB,YAAe,EACf,aAAgB,EAChB,YAAe,KAQLjB,ICzKK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.66a017d7.chunk.js","sourcesContent":["import json_data from './streams.json';\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\n\nimport './App.css';\nimport { Graph } from 'react-d3-graph';\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tconsole.log(json_data)\n\n\t\t// graph payload (with minimalist structure)\n\t\tconst nodes = json_data.nodes.map(x => {\n\t\t\treturn {id: x.self_subroutine_name}\n\t\t})\n\t\tconst edges = json_data.edges.map(x => {\n\t\t\tlet map = {\n\t\t\t\tsource: x.self_subroutine_name,\n\t\t\t\ttarget: x.called_subroutine_name\n\t\t\t};\n\t\t\treturn map\n\t\t})\n\t\tconsole.log(\"nodes\");\n\t\tconsole.log(nodes);\n\t\tconsole.log(\"edges\");\n\t\tconsole.log(edges);\n\n\t\tconst data = {\n\t\t\tnodes: nodes,\n\t\t\tlinks: edges\n\t\t};\n\t\t\n\t\t// the graph configuration, you only need to pass down properties\n\t\t// that you want to override, otherwise default ones will be used\n\t\tconst myConfig = make_config();\n\t\tthis.state = {data: data, config: myConfig};\n\n\t}\n\n\tonZoomChange(prevZoom, newZoom) {\n\t\tthis.setState({currentZoom: newZoom});\n\t}\n\t\n\trender() {\n\t\tconst graph = <Graph\n\t\t     id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n\t\t     data={this.state.data}\n\t\t     config={this.state.config}\n\t\t\t onZoomChange={this.onZoomChange}\n\t\t     //onClickGraph={onClickGraph}\n\t\t     //onClickNode={onClickNode}\n\t\t     //onDoubleClickNode={onDoubleClickNode}\n\t\t     //onRightClickNode={onRightClickNode}\n\t\t     //onClickLink={onClickLink}\n\t\t     //onRightClickLink={onRightClickLink}\n\t\t     //onMouseOverNode={onMouseOverNode}\n\t\t     //onMouseOutNode={onMouseOutNode}\n\t\t     //onMouseOverLink={onMouseOverLink}\n\t\t     //onMouseOutLink={onMouseOutLink}\n\t\t\t/>\n\t\tconsole.log(graph)\n\t\treturn graph\n\t}\n}\n\n// Callback to handle click on the graph.\n// @param {Object} event click dom event\nconst onClickGraph = function(event) {\n     //window.alert('Clicked the graph background');\n};\n\nconst onClickNode = function(nodeId) {\n     //window.alert('Clicked node ${nodeId}');\n};\n\nconst onDoubleClickNode = function(nodeId) {\n     //window.alert('Double clicked node ${nodeId}');\n};\n\nconst onRightClickNode = function(event, nodeId) {\n     //window.alert('Right clicked node ${nodeId}');\n};\n\nconst onMouseOverNode = function(nodeId) {\n     //window.alert(`Mouse over node ${nodeId}`);\n};\n\nconst onMouseOutNode = function(nodeId) {\n     //window.alert(`Mouse out node ${nodeId}`);\n};\n\nconst onClickLink = function(source, target) {\n     //window.alert(`Clicked link between ${source} and ${target}`);\n};\n\nconst onRightClickLink = function(event, source, target) {\n     //window.alert('Right clicked link between ${source} and ${target}');\n};\n\nconst onMouseOverLink = function(source, target) {\n     //window.alert(`Mouse over in link between ${source} and ${target}`);\n};\n\nconst onMouseOutLink = function(source, target) {\n     //window.alert(`Mouse out link between ${source} and ${target}`);\n};\n\nconst onNodePositionChange = function(nodeId, x, y) {\n     //window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n};\n\nconst make_config = function() {\n\treturn {\n\t  \"automaticRearrangeAfterDropNode\": false,\n\t  \"collapsible\": false,\n\t  \"directed\": true,\n\t  \"focusAnimationDuration\": 0.75,\n\t  \"focusZoom\": 1,\n\t  \"height\": 1000,\n\t  \"highlightDegree\": 1,\n\t  \"highlightOpacity\": 0.2,\n\t  \"linkHighlightBehavior\": false,\n\t  \"maxZoom\": 8,\n\t  \"minZoom\": 0.1,\n\t  \"nodeHighlightBehavior\": true,\n\t  \"panAndZoom\": false,\n\t  \"staticGraph\": false,\n\t  \"staticGraphWithDragAndDrop\": false,\n\t  \"width\": 1600,\n\t  \"d3\": {\n\t    \"alphaTarget\": 0.05,\n\t    \"gravity\": -800,\n\t    \"linkLength\": 400,\n\t    \"linkStrength\": .1,\n\t    \"disableLinkForce\": false\n\t  },\n\t  \"node\": {\n\t    \"color\": \"#d3d3d3\",\n\t    \"fontColor\": \"black\",\n\t    \"fontSize\": 20,\n\t    \"fontWeight\": \"normal\",\n\t    \"highlightColor\": \"red\",\n\t    \"highlightFontSize\": 30,\n\t    \"highlightFontWeight\": \"bold\",\n\t    \"highlightStrokeColor\": \"SAME\",\n\t    \"highlightStrokeWidth\": 1.5,\n\t    \"labelProperty\": \"name\",\n\t    \"mouseCursor\": \"pointer\",\n\t    \"opacity\": 1,\n\t    \"renderLabel\": true,\n\t    \"size\": 450,\n\t    \"strokeColor\": \"none\",\n\t    \"strokeWidth\": 1.5,\n\t    //\"svg\": \"\",\n\t    \"symbolType\": \"circle\"\n\t  },\n\t  \"link\": {\n\t    \"color\": \"#d3d3d3\",\n\t    \"fontColor\": \"red\",\n\t    \"fontSize\": 10,\n\t    \"fontWeight\": \"normal\",\n\t    \"highlightColor\": \"blue\",\n\t    \"highlightFontSize\": 8,\n\t    \"highlightFontWeight\": \"bold\",\n\t    \"mouseCursor\": \"pointer\",\n\t    \"opacity\": 1,\n\t    \"renderLabel\": false,\n\t    \"semanticStrokeWidth\": false,\n\t    \"strokeWidth\": 2,\n\t    \"markerHeight\": 6,\n\t    \"markerWidth\": 6,\n\t\t//\"type\": \"CURVE_SMOOTH\"\n\t  }\n\t}\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}