{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","request","XMLHttpRequest","open","send","console","log","responseText","json_data","JSON","parse","label_map","Map","counter","nodes","file_nodes","map","x","set","file_name","id","label","title","edges","file_edges","edge","base_file","get","called_file","from","to","value","occurances","graph","options","shape","scaling","min","max","drawThreshold","maxVisible","color","inherit","width","smooth","type","height","physics","forceAtlas2Based","gravitationalConstant","centralGravity","springLength","springConstant","maxVelocity","solver","timestep","stabilization","iterations","events","select","event","entries","getNetwork","network","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4ICiH5BC,MA7Df,WAEC,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,gBAAgB,GACpCF,EAAQG,KAAK,MAEbC,QAAQC,IAAIL,EAAQM,cAEpB,IAAIC,EAAYC,KAAKC,MAAMT,EAAQM,cAEnCF,QAAQC,IAAIE,GAEZ,IAAIG,EAAY,IAAIC,IAChBC,EAAU,EACRC,EAAQN,EAAUO,WAAWC,KAAI,SAAAC,GAGtC,OAFAJ,GAAW,EACXF,EAAUO,IAAID,EAAEE,UAAWN,GACpB,CAACO,GAAIP,EAASQ,MAAOJ,EAAEE,UAAWG,MAAOL,EAAEE,cAG7CI,EAAQf,EAAUgB,WAAWR,KAAI,SAAAS,GAGtC,OAFApB,QAAQC,IAAImB,EAAKC,UAAc,OAASf,EAAUgB,IAAIF,EAAKC,YAC3DrB,QAAQC,IAAImB,EAAKG,YAAe,OAASjB,EAAUgB,IAAIF,EAAKG,cACrD,CACNC,KAAMlB,EAAUgB,IAAIF,EAAKC,WACzBI,GAAInB,EAAUgB,IAAIF,EAAKG,aACvBG,MAAON,EAAKO,eAIRC,EAAQ,CACbnB,MAAOA,EACPS,MAAOA,GAIRlB,QAAQC,IAAIQ,GACZT,QAAQC,IAAIiB,GACZ,IAAIW,EA7EU,CACbpB,MAAO,CACNqB,MAAO,MACPC,QAAS,CACRC,IAAI,GACJC,IAAI,IAELjB,MAAO,CACCgB,IAAK,EACLC,IAAK,GACLC,cAAe,GACfC,WAAY,KAGrBjB,MAAO,CACFkB,MAAO,CAAEC,SAAS,GAClBC,MAAO,IACPC,OAAQ,CACNC,KAAM,eAGbC,OAAQ,SAERC,QAAS,CACJC,iBAAkB,CAChBC,uBAAwB,GACxBC,eAAgB,KAChBC,aAAc,IACdC,eAAgB,KAElBC,YAAa,IACbC,OAAQ,mBACRC,SAAU,IACVC,cAAe,CAAEC,WAAY,OA8C7BC,EAAS,CACbC,OAAQ,SAASC,GAAQ,IACjB9C,EAAiB8C,EAAjB9C,MAAOS,EAAUqC,EAAVrC,MACblB,QAAQC,IAAI,mBACbD,QAAQC,IAAIQ,EAAM+C,WACjBxD,QAAQC,IAAIQ,GACZT,QAAQC,IAAI,mBACZD,QAAQC,IAAIiB,KAIf,OACE,kBAAC,IAAD,CACEU,MAAOA,EACPC,QAASA,EACTwB,OAAQA,EACRI,WAAY,SAAAC,QChGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.b6dbd8b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from \"react-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\n\n//import \"./styles.css\";\n//// need to import the vis network css in order to show tooltip\n//import \"./network.css\";\n//\n\nfunction load_options() {\n\tlet options = {\n\t\tnodes: {\n\t\t\tshape: \"dot\",\n\t\t\tscaling: {\n\t\t\t\tmin:10,\n\t\t\t\tmax:30\n\t\t\t},\n\t\t\tlabel: {\n        \t  min: 8,\n        \t  max: 30,\n        \t  drawThreshold: 12,\n        \t  maxVisible: 20,\n        \t},\n\t\t}, \n\t\tedges: {\n    \t  color: { inherit: true },\n    \t  width: 0.15,\n    \t  smooth: {\n    \t    type: \"continuous\",\n    \t  },\n    \t},\n\t\theight: \"1000px\",\n\t\t\n\t\tphysics: {\n    \t  forceAtlas2Based: {\n    \t    gravitationalConstant: -35,\n    \t    centralGravity: 0.005,\n    \t    springLength: 230,\n    \t    springConstant: 0.18,\n    \t  },\n    \t  maxVelocity: 146,\n    \t  solver: \"forceAtlas2Based\",\n    \t  timestep: 0.35,\n    \t  stabilization: { iterations: 150 },\n    \t},\n  \t};\n\treturn options\n}\n\nfunction App() {\n\n\tvar request = new XMLHttpRequest();\n\trequest.open('GET', 'streams.json', false);  \n\trequest.send(null);\n\n\tconsole.log(request.responseText);\n\t\n\tlet json_data = JSON.parse(request.responseText);\n\n\tconsole.log(json_data);\n\t\n\tlet label_map = new Map();\n\tlet counter = 0;\n\tconst nodes = json_data.file_nodes.map(x => {\n\t\tcounter += 1;\n\t\tlabel_map.set(x.file_name, counter);\n\t\treturn {id: counter, label: x.file_name, title: x.file_name}\n\t})\n\n\tconst edges = json_data.file_edges.map(edge => {\n\t\tconsole.log(edge.base_file    +\" id:\"  +label_map.get(edge.base_file))\n\t\tconsole.log(edge.called_file  + \" id:\" + label_map.get(edge.called_file))\n\t\treturn {\n\t\t\tfrom: label_map.get(edge.base_file),\n\t\t\tto: label_map.get(edge.called_file),\n\t\t\tvalue: edge.occurances\n\t\t}\n\t})\n\n\tconst graph = {\n\t\tnodes: nodes,\n\t\tedges: edges\n\t};\n\n\n\tconsole.log(nodes)\n\tconsole.log(edges)\n\tlet options = load_options();\n\n\tconst events = {\n\t  select: function(event) {\n\t    var { nodes, edges } = event;\n\t    console.log(\"Selected nodes:\");\n\t\t  console.log(nodes.entries())//.forEach(x => console.log(x));\n\t    console.log(nodes);\n\t    console.log(\"Selected edges:\");\n\t    console.log(edges);\n\t  }\n\t};\n\n  return (\n    <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={network => {}}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}